{"version":3,"sources":["../../src/components/GridView/GridView.tsx","../../src/hook/useWindowSize.ts","ItemCard.tsx","App.tsx","index.tsx"],"names":["BreakPoints","name","width","col","GridView","props","items","renderItem","useState","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","setCol","gridItems","setGridItems","numberOfCol","getCol","grid","i","push","forEach","item","index","screenWidth","filter","slice","React","className","styles","map","key","style","flexBasis","ItemCard","url","detail","src","alt","crossOrigin","loading","App","setItems","fetchMoreData","renerateRandomItem","Math","round","random","result","prevItems","textAlign","dataLength","length","next","hasMore","loader","endMessage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c949bf76.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useWindowSize } from '../../hook/useWindowSize.js'\nimport styles from '../../styles.module.css'\n\ninterface GridViewProps {\n  items: any[]\n  renderItem: Function\n}\nconst BreakPoints = [\n  { name: 'xs', width: 0, col: 1 },\n  { name: 'sm', width: 576, col: 2 },\n  { name: 'md', width: 768, col: 2 },\n  { name: 'lg', width: 992, col: 3 },\n  { name: 'xl', width: 1200, col: 4 },\n  { name: 'xxl', width: 1600, col: 6 }\n]\nconst GridView = (props: GridViewProps) => {\n  const { items, renderItem } = props\n  const { width } = useWindowSize()\n  const [col, setCol] = useState(1)\n  const [gridItems, setGridItems] = useState<any[][]>([])\n\n  useEffect(() => {\n    const numberOfCol = getCol(width || window.innerWidth)\n    if (numberOfCol !== col) {\n      setCol(numberOfCol)\n    }\n  }, [width])\n\n  useEffect(() => {\n    const grid: any[][] = []\n    for (let i = 0; i < col; i++) {\n      grid.push([])\n    }\n    items.forEach((item, index) => {\n      grid[index % col].push(item)\n    })\n    setGridItems(grid)\n  }, [col, items])\n\n  const getCol = (screenWidth: number) => {\n    const [breakPoint] = BreakPoints.filter(\n      ({ width }) => width < screenWidth\n    ).slice(-1)\n    return breakPoint.col || 1\n  }\n\n  return (\n    <div className={styles.grid_container}>\n      {gridItems.map((items, index) => (\n        <div\n          key={index}\n          className={styles.grid_column}\n          style={{ flexBasis: `${100 / col}%` }}\n        >\n          <div className={styles.grid_column_spacing}>\n            {items.map((item, i) => (\n              <div key={i}>{renderItem(item)}</div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default GridView\n","import { useEffect, useState } from 'react'\n\ntype WindowSize = {\n  width: number | undefined\n  height: number | undefined\n}\n\nexport const useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState<WindowSize>({\n    width: undefined,\n    height: undefined\n  })\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    }\n    window.addEventListener('resize', handleResize)\n    handleResize()\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n  return windowSize\n}\n","import React from 'react'\nimport './index.css'\ntype ItemCardProps = {\n  item: any\n}\n\nconst ItemCard = ({ item }: ItemCardProps) => {\n  const { url, detail, width, height } = item\n  return (\n    <div className='card_container'>\n      <div className='card'>\n        <div className='cover'>\n          <img\n            src={url}\n            alt={'a random'}\n            crossOrigin='anonymous'\n            loading='lazy'\n          />\n        </div>\n        <div className='detail'>\n          <p>\n            <i>{`${width}x${height}`}</i>\n          </p>\n          <p className='description'>{detail}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ItemCard\n","import React, { useEffect, useState } from 'react'\n\nimport { GridView } from 'dynamic-grid-layout'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport 'dynamic-grid-layout/dist/index.css'\nimport ItemCard from './ItemCard'\n\nconst App = () => {\n  const [items, setItems] = useState<any[]>([])\n  useEffect(() => {\n    fetchMoreData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const renerateRandomItem = () => {\n    const width = Math.round(Math.random() * 200) + 500\n    const height = Math.round(Math.random() * 200) + 500\n    return {\n      url: `https://picsum.photos/${width}/${height}`,\n      width,\n      height,\n      detail:\n        Math.random() > 0.5\n          ? 'A short description'\n          : 'A very long description. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean sed odio id turpis fringilla ornare vitae ut libero. Donec sit amet iaculis ligula. Nam at tristique odio, nec mollis sapien. Morbi vel massa metus. Suspendisse porta accumsan turpis. Integer sit amet enim efficitur, semper sem nec, rutrum ligula. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Proin nunc lorem, fringilla a eros eget, rutrum vehicula ipsum. Vivamus consectetur fringilla porttitor. Etiam tincidunt aliquam nunc nec fermentum. Sed orci urna, porta a mauris a, euismod porttitor nisl. Praesent fringilla dui sed ultrices accumsan. Aenean in ante et enim consequat mollis ac ac dolor.'\n    }\n  }\n\n  const fetchMoreData = () => {\n    const result: any[] = []\n    for (let i = 0; i < 20; i++) {\n      result.push(renerateRandomItem())\n    }\n    setItems((prevItems) => [...prevItems, ...result])\n  }\n\n  return (\n    <>\n      <h1 style={{ textAlign: 'center' }}>Dynamic grid view</h1>\n      <InfiniteScroll\n        dataLength={items.length}\n        next={fetchMoreData}\n        hasMore={true}\n        loader={<h4>Loading...</h4>}\n        endMessage={\n          <p style={{ textAlign: 'center' }}>\n            <b>Yay! You have seen it all</b>\n          </p>\n        }\n      >\n        <GridView\n          items={items}\n          renderItem={(item: any) => <ItemCard item={item}></ItemCard>}\n        />\n      </InfiniteScroll>\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}